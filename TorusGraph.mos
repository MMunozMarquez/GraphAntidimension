!!!
!
! AntiResolving.mos: Formulation of the problem of looking for the antidimension and the antiresolving set in a graph
!
! CylinderGraph.mos: Generate a cylinder graph and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! TorusGraph.mos: Generate a torus graph and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! DenseGraph.mos: Generate a dense graph with a given degree and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! SparseGraph.mos: Generate a dense sparse with a given degree and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! Distances.mos: File to compute the distances between each pair of nodes in a graph
!
! Print.mos: File to print results
!
! From paper: On the (k, l)-anonymity of networks via their k-metric antidimension (2023)
!
! Authors: Elena Fern√°ndez, Dorota Kuziak, Manuel Munoz-Marquez, and Ismael G. Yero
!
! Corresponding author: Manuel Munoz-Marquez (manuel.munoz(at)uca.es)
!
! This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.
!
!!!

model Torus
uses 'mmxprs', 'mmsystem','mmjobs'

declarations
   n: integer           ! Total number of vertices
   max_r: integer       ! Maximum number of classes
   n_rows: integer      ! Number of rows
   n_columns: integer   ! Number of columns
   k: integer           ! parameter of k-antiresolving sets (minimum number of elements in each class)
end-declarations

! Print info message and read input parameters
writeln('Find the k-antidimension and a k-antidimension set of a torus graph')
writeln('Number of rows: ')
read(n_rows)
writeln('Number of columns: ')
read(n_columns)
writeln('Value of k: ')
read(k)

n := n_rows * n_columns
max_r := integer(n/k) - 1

declarations
   V = 1..n             ! indices of vertices
   R = 1..max_r	        ! indices of classes
   num_edges: integer   ! number of edges
   ! Auxiliary variables
   i1: integer
   i2: integer
   node: integer
   ! Edges of the torus
   Edge: array(range) of record
      i: integer
      j: integer
   end-record
end-declarations


! Generates a torus graph with n_rows rows and n_columns columns

! Initialize num_edges to generate edge set
num_edges := 0

! Generate edges
! Bottom right vertex
node := n_rows * n_columns
num_edges := num_edges + 1
Edge(num_edges).i := node
Edge(num_edges).j := n_columns
num_edges := num_edges + 1
Edge(num_edges).i := node
Edge(num_edges).j := (n_rows -1 ) * n_columns + 1
! Remaining right border
forall(i in 1..(n_rows - 1)) do
   node := i * n_columns
   num_edges := num_edges + 1
   Edge(num_edges).i := node
   Edge(num_edges).j := node - n_columns + 1
   num_edges := num_edges + 1
   Edge(num_edges).i := node
   Edge(num_edges).j := node + n_columns
end-do
! Remaining bottom border
forall(j in 1..(n_columns -1)) do
   node := (n_rows - 1) * n_columns + j
   num_edges := num_edges + 1
   Edge(num_edges).i := node
   Edge(num_edges).j := node + 1
   num_edges := num_edges + 1
   Edge(num_edges).i := node
   Edge(num_edges).j := j
end-do
! Remaining vertices
forall(i in 1..(n_rows - 1), j in 1..(n_columns -1)) do
   node := (i-1) * n_columns + j
   num_edges := num_edges + 1
   Edge(num_edges).i := node
   Edge(num_edges).j := node + 1
   num_edges := num_edges + 1
   Edge(num_edges).i := node
   Edge(num_edges).j := node + n_columns
end-do

 ! Computes distances between each pair of vertices d(., .)

declarations
   d : array(V, V) of integer
end-declarations

forall (node1 in V) do
	i1 := integer((node1 - 1)/n_columns) + 1
	j1 := node1 - (i1 - 1) * n_columns
	forall(node2 in V | node2 <> node1) do
	   i2 := integer((node2 - 1)/n_columns) + 1
	   j2 := node2 - (i2 - 1) * n_columns
	   d(node1, node2) := minlist(abs(i1 - i2), n_rows - abs(i1 - i2)) + minlist(abs(j1 - j2), n_columns - abs(j1 - j2))
	end-do
end-do

! Include the model file and solve it
include "AntiResolvingModel.mos"

! Print results
include "Print.mos"

end-model

