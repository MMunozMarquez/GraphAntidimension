!!!
!
! AntiResolving.mos: Formulation of the problem of looking for the antidimension and the antiresolving set in a graph
!
! CylinderGraph.mos: Generate a cylinder graph and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! TorusGraph.mos: Generate a torus graph and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! DenseGraph.mos: Generate a dense graph with a given degree and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! SparseGraph.mos: Generate a dense sparse with a given degree and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! Distances.mos: File to compute the distances between each pair of nodes in a graph
!
! Print.mos: File to print results
!
! From paper: On the (k, l)-anonymity of networks via their k-metric antidimension (2023)
!
! Authors: Elena Fern√°ndez, Dorota Kuziak, Manuel Munoz-Marquez, and Ismael G. Yero
!
! Corresponding author: Manuel Munoz-Marquez (manuel.munoz(at)uca.es)
!
! This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.
!
!!!

model DenseGraph
uses 'mmxprs', 'mmsystem','mmjobs'

options noimplicit

declarations
   nEdges: range
   EdgeSet = array(nEdges) of record
      i: integer
      j: integer
   end-record
end-declarations


! Compute distances between each pair of nodes
include "Distances.mos"

declarations
   n: integer       ! Total number of vertices
   degree: integer  ! Target degree
   k: integer       ! parameter of k-antiresolving sets (minimum number of elements in the classes)
   max_r: integer   ! Maximum number of classes
   seed: integer    ! Seed for the random number generator
   tau: integer	    ! maximum degree of vertices is degree = n - tau
end-declarations


! Print info message and read input parameters
writeln('Generate a dense graph and find its k-antidimension and a k-antidimension set')
writeln('Number vertices:')
read(n)
writeln('Maximum vertex degree')
read(degree)
tau := n - degree
writeln('Value of k:')
read(k)

seed:=135797531

setrandseed(seed)
max_r := integer(n/k) - 1

declarations
   V = 1..n           ! indices of vertices
   R = 1..max_r       ! indices of classes
   num_edges: integer ! number of edges
   index: integer
   i1: integer
   ii: integer
   j1: integer
   jj: integer
   ! Edge of the graph
   Edge: EdgeSet
   d: array(V, V) of integer ! distances 
   ! Auxiliary variables
   maxdegree: integer
   n_cand: integer
   repe: array(V) of boolean
   vertexdegree: array(V) of integer
   link: array(V, V) of boolean
   cand: array(V) of integer
end-declarations


! Generates a graph with n vertices and maximum degree degree
num_edges := 0

forall(i in V) vertexdegree(i) := n - 1
forall(i, j in V | i < j) do
	link(i, j) := true
end-do
forall(i in V | vertexdegree(i) > degree) do
   n_cand := 0
   forall(j in V) cand(j) := 0

   forall(j in V) do
      if(vertexdegree(i) < degree or j < i and not link(j, i)) or (j > i and not link(i, j)) then
         repe(j) := true
      else
         repe(j) := false
	 n_cand := n_cand + 1
	 cand(n_cand) := j
      end-if
   end-do
   repe(i) := true
   index := 1
   while(index < tau) do
      jj := integer(round((n_cand * random) + 0.5))
      ii := cand(jj)
      if(ii < i) then
         link(ii, i) := false
      else
         link(i,ii) := false
      end-if
      repe(ii) := true
      vertexdegree(ii) := vertexdegree(ii) - 1
      vertexdegree(i) := vertexdegree(i) - 1
      index := index + 1
      j1 := jj
      while(j1 < n_cand - 1) do
         cand(j1) := cand(j1 + 1)
	 j1 := j1 + 1
      end-do
      n_cand := n_cand - 1
   end-do
end-do
num_edges := 0
forall(i, j in V | i < j) do
   if(link(i, j)) then
      num_edges := num_edges + 1
      Edge(num_edges).i := i
      Edge(num_edges).j := j
      d(i, j) := 1
      d(j, i) := 1
   end-if
end-do

declarations
   Edges = 1.. num_edges
end-declarations


! Computes distances between pairs of vertices with Floyd-Warshall
maxdegree := distances(V, Edge, vertexdegree, d)

! Info of the generated graph
writeln('Target degree : ', degree, ' achieved degree : ', maxdegree)

! Include the model file and solve it
include "AntiResolvingModel.mos"

! Print results
include "Print.mos"

end-model

