!!!
!
! AntiResolving.mos: Formulation of the problem of looking for the antidimension and the antiresolving set in a graph
!
! CylinderGraph.mos: Generate a cylinder graph and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! TorusGraph.mos: Generate a torus graph and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! DenseGraph.mos: Generate a dense graph with a given degree and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! SparseGraph.mos: Generate a dense sparse with a given degree and find its antidimension and an antidimension set trough AntiResolving.mos 
!
! Distances.mos: File to compute the distances between each pair of nodes in a graph
!
! Print.mos: File to print results
!
! From paper: On the (k, l)-anonymity of networks via their k-metric antidimension (2023)
!
! Authors: Elena Fern√°ndez, Dorota Kuziak, Manuel Munoz-Marquez, and Ismael G. Yero
!
! Corresponding author: Manuel Munoz-Marquez (manuel.munoz(at)uca.es)
!
! This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.
!
!!!

! Computes distances between pairs of vertices with Floyd-Warshall
function distances( V: range,
                    Edge: EdgeSet,
		    vertexdegree: array(range) of integer,
		    d: array(range, range) of integer): integer
   declarations
      icmax: integer
      icount: integer
      maxdist: integer
      ndist1: integer
      ndist2: integer
   end-declarations
   forall(i1 in V) d(i1, i1) := 0
   forall(i1, i2 in V | i1 <> i2) d(i1, i2) := 99999999
   forall(i1 in nEdges) do
      d(Edge(i1).i, Edge(i1).j) := 1
      d(Edge(i1).j, Edge(i1).i) := 1
   end-do
   forall(i2 in V) do
      forall(i1 in V | i1 <> i2) do
         forall(k1 in V | k1 <> i2) do
	    d(i1, k1) := minlist(d(i1, k1), d(i1, i2) + d(i2, k1))
	 end-do
      end-do
   end-do
   
   maxdist := 0
   ndist1 := 0
   ndist2 := 0
   forall(i1, i2 in V| i2 > i1) do
      if(d(i1, i2) > maxdist) then
         maxdist := d(i1, i2)
	 ndist1 := i1
	 ndist2 := i2
      end-if
   end-do
   icount := 0
   icmax := 0
   forall(i1 in V) do
      if(vertexdegree(i1) = 0) then
         vertexdegree(i1) := 1
	 writeln('SHOULD NOT HAPPEN degree = 0 para ', i1)
      end-if
      if(vertexdegree(i1) = 1) then
         icount:=icount + 1
      end-if
      if(vertexdegree(i1) > icmax) then
         icmax := vertexdegree(i1)
      end-if
   end-do 

returned := icmax

end-function

